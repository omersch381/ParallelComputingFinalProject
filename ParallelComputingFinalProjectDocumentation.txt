The problem was parallelized using MPI and OMP and CUDA.
For every THRESHOLD sequences (THRESHOLD is defined in the beginning), the Master process sends (using MPI) the longest 
sequence to the Slave process.
Both of the processes work in parallel, they both check all the sequences that they are responsible to 
check, and they both use OpenMP to check the sequences in a multithreaded way.

The OpenMP is being used (pragma declared) in the checkedSequence's for loop (the checkTheSequences method).
That means that for each sequence, the processes check all possible offsets and hyphen indices.
I chose to write the program in this architecture because I could see that there are multiple nested 
for loops, that do not depend on each other, i.e. might (or should) be parallelized.


The programs' complexity analysis:

for each sequence:
    for each offset:
        for each hyphen:
            generate signs with a hyphen: for each char in Seq2:
                check for alignment between chars (o(1) if the groups stay in this size)
            move the hyphen index (not an additional for loop - just 3 commands)
            get sum: for each char in Seq2:
                sum its value

Which means that it's o(NS2 => 1 * (Seq1 - Seq2) * Seq2 * Seq2) ~ o(Seq2^2 * (Seq1 - Seq2))
if the number of seq2s is negligible, and if we shall say that the Conservative and 
Semi-Conservative groups' check consumes o(1).

I would like to mention that I allocated memory for a signs chain for each Seq2 once.
For each hyphen index change I moved the hyphen in the chain itself (3 commands).
And also that I used strdup (memory) for each offset, in order to revert the original Seq2 because I 
used realloc on the original Seq2.
I don't know if it was the optimal solution but I think that it is good.

I could improve my program with the following ways:
    Rewinding the hyphen index to 1 instead of using strdup and saving some memory.

    Using the last iteration's sum and do small changes (2 characters) instead of recalculating it for
    every iteration (though it wouldn't change the complexity)


CUDA is being used to parallelize the areTheCharsInGroup method.
The areTheCharsInGroup method checks if 2 characters are in the same group of characters.
The method is divided into 2 separete and almost identical parts because I tried to allocated as less 
memory as possible.
I allocated memory for an integer in the device, which will have the answer - 0 or 1.
0 in case that both of the characters are not in the same group and 1 if they are.
I use 64 threads per block, make sure that there are no errors after every operation and free the 
variable I allocated for the answer.


Explanation about the methods:

I defined a CheckedSequence struct which includes the sequence (char *), the offset (int), and the hyphen-index (int).

In my main method I first do a sanity check that makes sure that my program runs with 2 processes.

The masterJob method reads the data from the input.txt file, allocates space by demand, sends the 
slave process it's parts of the program via MPI, checks its own parts, receives the checked parts 
from the slave and then writes the results to the output.txt file.

In the sendTheSlaveItsPartOfTheSequences method it is separeted to 2 options:
    If the numOfSequences is bigger than the THRESHOLD defined in the beginning, it sends the longest
    one among them to the slave process, and repeats this action for every THRESHOLD sequences.
    E.g. if the THRESHOLD is 4 and we have 7 sequences, there will be 2 sequences that will be sent to
    the slave process - the longest among the 0-3 ones, and the longest among the 4-6 ones.

    Else, (less than THRESHOLD sequences), it just sends the slave one longest sequence, even if there 
    is only one sequence.

In both sendMultipleRoundsOfSequences and sendOneRoundOfSequences it keeps the int* sequencesToIgnore,
a pointer that the Master process will use later to make sure it doesn't check the same sequences 
that were sent to the Slave process before.
They (methods) use the getLongestSequenceIndex method to get the longest sequences which they send to 
the slave afterwards.

The checkTheSequences method is the one that I used the openmp decleration.
It is the major one related to actually checking the sequences.
It uses the checkSequence for every sequence.

In the receiveTheSequencesFromTheSlave method, the Master simply receives the checked sequences by the 
Slave process.

The writeTheSequances uses writeSequenceToFile to write every sequnce to the file, pretty straight-forward.

In the slaveJob method, we can see all the flow of the Slave process.
It starts with receving the sequencesToReceive (and to check) from the Master process.
For every sequence of the numOfSequancesToCheck, the Slave receives, first the length of the sequence,
and then the sequence itself, the Slave process checks the sequences and sends the Master the results.

mpiSendReceiveInitialVariables method describes the initial send/receive actions the Master has to send
to the Slave, e.g. w1, w2, w3, w4, the sequences etc.

In the checkSequence method, each process that runs that method, runs it multithreaded.
For each offset it gets the closest hyphen-index, and it chooses the closest offset in this way.

The getAlignmentForClosestHypenAndCurrentOffset method gets an offset and finds the closest hyphen-index
for that offset.
It does that by using the addHyphenAt method which adds a '-' at the index it's being told (realloc),
And it does it using the generateSignsForCurrentOffsetAndCurrentHyphenIndex method.
The 2 aforementioned methods are being used once, for each Seq2, and for each other hyphen, 
moveTheHyphenInOneIndexInSignsChain it being used.
The moveTheHyphenInOneIndexInSignsChain moves the hyphen one index forward, on the signs chain (in place),
with 3 commands and without any additional for loop.

Both generateSignsForCurrentOffsetAndCurrentHyphenIndex method and moveTheHyphenInOneIndexInSignsChain
use checkAndSetProximity, which checks for Conservative or Semi-Conservative alignment between each 2 chars.

The methods areConservative and areSemiConservative check if the 2 characters are present in the same
group, for each group of letters.
The order is first, areConservative, and then (if it is not conservative) areSemiConservative.
Both of them use the areTheCharsInGroup method, which does exactly as its name reffer.

getAlignmentSum receives a signs chain and returns its sum, by the keys that were written in the assignment.
